{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Annotation, EditorState, StateEffect } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { getDefaultExtensions } from './getDefaultExtensions';\nimport { getStatistics } from './utils';\nvar External = Annotation.define();\nvar emptyExtensions = [];\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions = emptyExtensions,\n    autoFocus,\n    theme = 'light',\n    height = null,\n    minHeight = null,\n    maxHeight = null,\n    width = null,\n    minWidth = null,\n    maxWidth = null,\n    placeholder: placeholderStr = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root,\n    initialState\n  } = props;\n  var [container, setContainer] = useState();\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    },\n    '& .cm-scroller': {\n      height: '100% !important'\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function' && // Fix echoing of the remote changes:\n    // If transaction is market as remote we don't have to call `onChange` handler again\n    !vu.transactions.some(tr => tr.annotation(External))) {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n\n    onStatistics && onStatistics(getStatistics(vu));\n  });\n  var defaultExtensions = getDefaultExtensions({\n    theme,\n    editable,\n    readOnly,\n    placeholder: placeholderStr,\n    indentWithTab: defaultIndentWithTab,\n    basicSetup: defaultBasicSetup\n  });\n  var getExtensions = [updateListener, defaultThemeOption, ...defaultExtensions];\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var config = {\n        doc: value,\n        selection,\n        extensions: getExtensions\n      };\n      var stateCurrent = initialState ? EditorState.fromJSON(initialState.json, config, initialState.fields) : EditorState.create(config);\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\n      }\n    }\n\n    return () => {\n      if (view) {\n        setState(undefined);\n        setView(undefined);\n      }\n    };\n  }, [container, state]);\n  useEffect(() => setContainer(props.container), [props.container]);\n  useEffect(() => () => {\n    if (view) {\n      view.destroy();\n      setView(undefined);\n    }\n  }, [view]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);\n  useEffect(() => {\n    if (value === undefined) {\n      return;\n    }\n\n    var currentValue = view ? view.state.doc.toString() : '';\n\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: currentValue.length,\n          insert: value || ''\n        },\n        annotations: [External.of(true)]\n      });\n    }\n  }, [value, view]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js"],"names":["useEffect","useState","Annotation","EditorState","StateEffect","EditorView","getDefaultExtensions","getStatistics","External","define","emptyExtensions","useCodeMirror","props","value","selection","onChange","onStatistics","onCreateEditor","onUpdate","extensions","autoFocus","theme","height","minHeight","maxHeight","width","minWidth","maxWidth","placeholder","placeholderStr","editable","readOnly","indentWithTab","defaultIndentWithTab","basicSetup","defaultBasicSetup","root","initialState","container","setContainer","view","setView","state","setState","defaultThemeOption","updateListener","of","vu","docChanged","transactions","some","tr","annotation","doc","_value","toString","defaultExtensions","getExtensions","push","concat","config","stateCurrent","fromJSON","json","fields","create","viewCurrent","parent","undefined","destroy","focus","dispatch","effects","reconfigure","currentValue","changes","from","to","length","insert","annotations"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Annotation, EditorState, StateEffect } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { getDefaultExtensions } from './getDefaultExtensions';\nimport { getStatistics } from './utils';\nvar External = Annotation.define();\nvar emptyExtensions = [];\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions = emptyExtensions,\n    autoFocus,\n    theme = 'light',\n    height = null,\n    minHeight = null,\n    maxHeight = null,\n    width = null,\n    minWidth = null,\n    maxWidth = null,\n    placeholder: placeholderStr = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root,\n    initialState\n  } = props;\n  var [container, setContainer] = useState();\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    },\n    '& .cm-scroller': {\n      height: '100% !important'\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function' &&\n    // Fix echoing of the remote changes:\n    // If transaction is market as remote we don't have to call `onChange` handler again\n    !vu.transactions.some(tr => tr.annotation(External))) {\n      var doc = vu.state.doc;\n      var _value = doc.toString();\n      onChange(_value, vu);\n    }\n    onStatistics && onStatistics(getStatistics(vu));\n  });\n  var defaultExtensions = getDefaultExtensions({\n    theme,\n    editable,\n    readOnly,\n    placeholder: placeholderStr,\n    indentWithTab: defaultIndentWithTab,\n    basicSetup: defaultBasicSetup\n  });\n  var getExtensions = [updateListener, defaultThemeOption, ...defaultExtensions];\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var config = {\n        doc: value,\n        selection,\n        extensions: getExtensions\n      };\n      var stateCurrent = initialState ? EditorState.fromJSON(initialState.json, config, initialState.fields) : EditorState.create(config);\n      setState(stateCurrent);\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\n      }\n    }\n    return () => {\n      if (view) {\n        setState(undefined);\n        setView(undefined);\n      }\n    };\n  }, [container, state]);\n  useEffect(() => setContainer(props.container), [props.container]);\n  useEffect(() => () => {\n    if (view) {\n      view.destroy();\n      setView(undefined);\n    }\n  }, [view]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);\n  useEffect(() => {\n    if (value === undefined) {\n      return;\n    }\n    var currentValue = view ? view.state.doc.toString() : '';\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: currentValue.length,\n          insert: value || ''\n        },\n        annotations: [External.of(true)]\n      });\n    }\n  }, [value, view]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}"]},"metadata":{},"sourceType":"module"}