{"ast":null,"code":"/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    fn.apply(null, args);\n  };\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n\n    if (passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs);\n        }, threshold - passed);\n      }\n    }\n  };\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/axios/lib/helpers/throttle.js"],"names":["throttle","fn","freq","timestamp","threshold","lastArgs","timer","invoke","args","now","Date","clearTimeout","apply","throttled","passed","setTimeout","flush"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,OAAOF,IAAvB;AACA,MAAIG,QAAJ;AACA,MAAIC,KAAJ;;AAEA,QAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAb,KAA4B;AACzCN,IAAAA,SAAS,GAAGM,GAAZ;AACAJ,IAAAA,QAAQ,GAAG,IAAX;;AACA,QAAIC,KAAJ,EAAW;AACTK,MAAAA,YAAY,CAACL,KAAD,CAAZ;AACAA,MAAAA,KAAK,GAAG,IAAR;AACD;;AACDL,IAAAA,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeJ,IAAf;AACD,GARD;;AAUA,QAAMK,SAAS,GAAG,CAAC,GAAGL,IAAJ,KAAa;AAC7B,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,UAAMK,MAAM,GAAGL,GAAG,GAAGN,SAArB;;AACA,QAAKW,MAAM,IAAIV,SAAf,EAA0B;AACxBG,MAAAA,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAN;AACD,KAFD,MAEO;AACLJ,MAAAA,QAAQ,GAAGG,IAAX;;AACA,UAAI,CAACF,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAGS,UAAU,CAAC,MAAM;AACvBT,UAAAA,KAAK,GAAG,IAAR;AACAC,UAAAA,MAAM,CAACF,QAAD,CAAN;AACD,SAHiB,EAGfD,SAAS,GAAGU,MAHG,CAAlB;AAID;AACF;AACF,GAdD;;AAgBA,QAAME,KAAK,GAAG,MAAMX,QAAQ,IAAIE,MAAM,CAACF,QAAD,CAAtC;;AAEA,SAAO,CAACQ,SAAD,EAAYG,KAAZ,CAAP;AACD;;AAED,eAAehB,QAAf","sourcesContent":["/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n"]},"metadata":{},"sourceType":"module"}