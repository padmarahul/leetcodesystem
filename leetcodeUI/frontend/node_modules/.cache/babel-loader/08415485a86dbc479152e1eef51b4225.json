{"ast":null,"code":"var _jsxFileName = \"/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/src/pages/CodingEditorComponent/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { GlobalStateContext } from '../../GlobalStateContext'; // Import global state context\n\nimport axios from \"axios\";\nimport CodeMirror from '@uiw/react-codemirror';\nimport { javascript } from '@codemirror/lang-javascript'; // Import the language extension\n\nimport './CodingEditorComponent.css'; // Import custom CSS for styling\n\nimport DashboardServices from \"../../services/DashboardServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CodingEditorComponent = () => {\n  _s();\n\n  const [state] = useContext(GlobalStateContext); // Access global state\n\n  const problem = state.problemData; // Get the selected problem data\n\n  const [code, setCode] = useState('// Write your code here');\n  const [output, setOutput] = useState(''); // Fetch problems by category filter\n\n  const handleRunCode = () => {\n    var _parsedTestCases$test;\n\n    let parsedTestCases;\n\n    try {\n      // Parse the JSON if it's a string\n      parsedTestCases = JSON.parse(problem.exampleTestCases);\n    } catch (e) {\n      console.error(\"Failed to parse exampleTestCases:\", e);\n      parsedTestCases = {\n        test_cases: []\n      }; // Default to an empty object in case of failure\n    } // Transform the parsed test cases into the required format\n\n\n    const testCases = ((_parsedTestCases$test = parsedTestCases.test_cases) === null || _parsedTestCases$test === void 0 ? void 0 : _parsedTestCases$test.map(tc => ({\n      input: tc.input.replace(/[\\[\\],]/g, '').split(' ').join('\\n'),\n      expectedOutput: tc.expected_output.replace(/[\\[\\]]/g, '').split(',').join(' ')\n    }))) || [];\n    const requestBody = {\n      code: code,\n      testCases: testCases,\n      language: \"java\",\n      versionIndex: 4\n    }; // Fetch all problems\n\n    DashboardServices.executeCode(requestBody).then(response => {\n      setOutput(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coding-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"problem-details\",\n      children: problem ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"problem-title\",\n          children: problem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"problem-difficulty\",\n          children: [\"Difficulty: \", problem.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"problem-description\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: problem.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-format\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Input Format:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: problem.inputFormat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output-format\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Output Format:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: problem.outputFormat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Example Test Cases:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"test-cases\",\n          children: JSON.stringify(JSON.parse(problem.exampleTestCases), null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading problem...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Code Editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeMirror, {\n        value: code,\n        height: \"500px\",\n        extensions: [javascript({\n          jsx: true\n        })] // Using the javascript extension\n        ,\n        onChange: value => setCode(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"run-code-button\",\n        onClick: handleRunCode,\n        children: \"Run Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"black\",\n            fontWeight: \"bolder\"\n          },\n          children: \"Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            color: \"black\",\n            fontWeight: \"bolder\"\n          },\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodingEditorComponent, \"Ps09mdwefxsYHMcdmRbG1mdJk34=\");\n\n_c = CodingEditorComponent;\nexport default CodingEditorComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodingEditorComponent\");","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/src/pages/CodingEditorComponent/index.js"],"names":["React","useState","useContext","GlobalStateContext","axios","CodeMirror","javascript","DashboardServices","CodingEditorComponent","state","problem","problemData","code","setCode","output","setOutput","handleRunCode","parsedTestCases","JSON","parse","exampleTestCases","e","console","error","test_cases","testCases","map","tc","input","replace","split","join","expectedOutput","expected_output","requestBody","language","versionIndex","executeCode","then","response","data","catch","log","title","difficulty","description","inputFormat","outputFormat","stringify","jsx","value","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { GlobalStateContext } from '../../GlobalStateContext'; // Import global state context\nimport axios from \"axios\";\nimport CodeMirror from '@uiw/react-codemirror';\nimport { javascript } from '@codemirror/lang-javascript'; // Import the language extension\nimport './CodingEditorComponent.css'; // Import custom CSS for styling\nimport DashboardServices from \"../../services/DashboardServices\";\nconst CodingEditorComponent = () => {\n  const [state] = useContext(GlobalStateContext); // Access global state\n  const problem = state.problemData; // Get the selected problem data\n  const [code, setCode] = useState('// Write your code here');\n  const [output, setOutput] = useState('');\n\n  // Fetch problems by category filter\n  const handleRunCode = () => {\n    let parsedTestCases;\n\n    try {\n      // Parse the JSON if it's a string\n      parsedTestCases = JSON.parse(problem.exampleTestCases);\n    } catch (e) {\n      console.error(\"Failed to parse exampleTestCases:\", e);\n      parsedTestCases = { test_cases: [] }; // Default to an empty object in case of failure\n    }\n  \n    // Transform the parsed test cases into the required format\n    const testCases = parsedTestCases.test_cases?.map(tc => ({\n      input: tc.input.replace(/[\\[\\],]/g, '').split(' ').join('\\n'),\n      expectedOutput: tc.expected_output.replace(/[\\[\\]]/g, '').split(',').join(' ')\n    })) || [];\n    const requestBody = {\n      code: code,\n      testCases: testCases,\n      language: \"java\",\n      versionIndex: 4\n  };\n      // Fetch all problems\n      DashboardServices.executeCode(requestBody).then(response => {\n        setOutput(response.data)\n      }).catch(error => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"coding-editor-container\">\n      {/* Left Section: Problem Details */}\n      <div className=\"problem-details\">\n        {problem ? (\n          <>\n            <h1 className=\"problem-title\">{problem.title}</h1>\n            <h3 className=\"problem-difficulty\">Difficulty: {problem.difficulty}</h3>\n            <div className=\"problem-description\">\n              <p>{problem.description}</p>\n            </div>\n            <div className=\"input-format\">\n              <h4>Input Format:</h4>\n              <p>{problem.inputFormat}</p>\n            </div>\n            <div className=\"output-format\">\n              <h4>Output Format:</h4>\n              <p>{problem.outputFormat}</p>\n            </div>\n            <h4>Example Test Cases:</h4>\n            <pre className=\"test-cases\">{JSON.stringify(JSON.parse(problem.exampleTestCases), null, 2)}</pre>\n          </>\n        ) : (\n          <p>Loading problem...</p>\n        )}\n      </div>\n\n      {/* Right Section: Code Editor */}\n      <div className=\"editor-section\">\n        <h2>Code Editor</h2>\n        <CodeMirror\n          value={code}\n          height=\"500px\"\n          extensions={[javascript({ jsx: true })]}  // Using the javascript extension\n          onChange={(value) => setCode(value)}\n        />\n        <button className=\"run-code-button\" onClick={handleRunCode}>\n          Run Code\n        </button>\n        <div className=\"output-section\">\n          <h3 style={{color: \"black\", fontWeight:\"bolder\"}}>Output:</h3>\n          <pre style={{color: \"black\", fontWeight:\"bolder\"}}>{output}</pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodingEditorComponent;\n"]},"metadata":{},"sourceType":"module"}