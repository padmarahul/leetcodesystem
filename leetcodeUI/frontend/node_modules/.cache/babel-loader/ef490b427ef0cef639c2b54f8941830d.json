{"ast":null,"code":"import _objectSpread from \"/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport { trackStream } from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport { progressEventReducer, progressEventDecorator, asyncDecorator } from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\nvar isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nvar isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function'; // used only inside the fetch adapter\n\nvar encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? function (encoder) {\n  return function (str) {\n    return encoder.encode(str);\n  };\n}(new TextEncoder()) : /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = Uint8Array;\n            _context.next = 3;\n            return new Response(str).arrayBuffer();\n\n          case 3:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", new _context.t0(_context.t1));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nvar test = function test(fn) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return !!fn.apply(void 0, args);\n  } catch (e) {\n    return false;\n  }\n};\n\nvar supportsRequestStream = isReadableStreamSupported && test(function () {\n  var duplexAccessed = false;\n  var hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    }\n\n  }).headers.has('Content-Type');\n  return duplexAccessed && !hasContentType;\n});\nvar DEFAULT_CHUNK_SIZE = 64 * 1024;\nvar supportsResponseStream = isReadableStreamSupported && test(function () {\n  return utils.isReadableStream(new Response('').body);\n});\nvar resolvers = {\n  stream: supportsResponseStream && function (res) {\n    return res.body;\n  }\n};\nisFetchSupported && function (res) {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(function (type) {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? function (res) {\n      return res[type]();\n    } : function (_, config) {\n      throw new AxiosError(\"Response type '\".concat(type, \"' is not supported\"), AxiosError.ERR_NOT_SUPPORT, config);\n    });\n  });\n}(new Response());\n\nvar getBodyLength = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(body) {\n    var _request;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(body == null)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", 0);\n\n          case 2:\n            if (!utils.isBlob(body)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", body.size);\n\n          case 4:\n            if (!utils.isSpecCompliantForm(body)) {\n              _context2.next = 9;\n              break;\n            }\n\n            _request = new Request(platform.origin, {\n              method: 'POST',\n              body: body\n            });\n            _context2.next = 8;\n            return _request.arrayBuffer();\n\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent.byteLength);\n\n          case 9:\n            if (!(utils.isArrayBufferView(body) || utils.isArrayBuffer(body))) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", body.byteLength);\n\n          case 11:\n            if (utils.isURLSearchParams(body)) {\n              body = body + '';\n            }\n\n            if (!utils.isString(body)) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.next = 15;\n            return encodeText(body);\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent.byteLength);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getBodyLength(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar resolveBodyLength = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(headers, body) {\n    var length;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            length = utils.toFiniteNumber(headers.getContentLength());\n            return _context3.abrupt(\"return\", length == null ? getBodyLength(body) : length);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function resolveBodyLength(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default isFetchSupported && /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(config) {\n    var _resolveConfig, url, method, data, signal, cancelToken, timeout, onDownloadProgress, onUploadProgress, responseType, headers, _resolveConfig$withCr, withCredentials, fetchOptions, composedSignal, request, unsubscribe, requestContentLength, _request, contentTypeHeader, _progressEventDecorat, _progressEventDecorat2, onProgress, flush, isCredentialsSupported, response, isStreamResponse, options, responseContentLength, _ref5, _ref6, _onProgress, _flush, responseData;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _resolveConfig = resolveConfig(config), url = _resolveConfig.url, method = _resolveConfig.method, data = _resolveConfig.data, signal = _resolveConfig.signal, cancelToken = _resolveConfig.cancelToken, timeout = _resolveConfig.timeout, onDownloadProgress = _resolveConfig.onDownloadProgress, onUploadProgress = _resolveConfig.onUploadProgress, responseType = _resolveConfig.responseType, headers = _resolveConfig.headers, _resolveConfig$withCr = _resolveConfig.withCredentials, withCredentials = _resolveConfig$withCr === void 0 ? 'same-origin' : _resolveConfig$withCr, fetchOptions = _resolveConfig.fetchOptions;\n            responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n            composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n            unsubscribe = composedSignal && composedSignal.unsubscribe && function () {\n              composedSignal.unsubscribe();\n            };\n\n            _context4.prev = 4;\n            _context4.t0 = onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head';\n\n            if (!_context4.t0) {\n              _context4.next = 11;\n              break;\n            }\n\n            _context4.next = 9;\n            return resolveBodyLength(headers, data);\n\n          case 9:\n            _context4.t1 = requestContentLength = _context4.sent;\n            _context4.t0 = _context4.t1 !== 0;\n\n          case 11:\n            if (!_context4.t0) {\n              _context4.next = 15;\n              break;\n            }\n\n            _request = new Request(url, {\n              method: 'POST',\n              body: data,\n              duplex: \"half\"\n            });\n\n            if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n              headers.setContentType(contentTypeHeader);\n            }\n\n            if (_request.body) {\n              _progressEventDecorat = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress))), _progressEventDecorat2 = _slicedToArray(_progressEventDecorat, 2), onProgress = _progressEventDecorat2[0], flush = _progressEventDecorat2[1];\n              data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n            }\n\n          case 15:\n            if (!utils.isString(withCredentials)) {\n              withCredentials = withCredentials ? 'include' : 'omit';\n            } // Cloudflare Workers throws when credentials are defined\n            // see https://github.com/cloudflare/workerd/issues/902\n\n\n            isCredentialsSupported = \"credentials\" in Request.prototype;\n            request = new Request(url, _objectSpread(_objectSpread({}, fetchOptions), {}, {\n              signal: composedSignal,\n              method: method.toUpperCase(),\n              headers: headers.normalize().toJSON(),\n              body: data,\n              duplex: \"half\",\n              credentials: isCredentialsSupported ? withCredentials : undefined\n            }));\n            _context4.next = 20;\n            return fetch(request);\n\n          case 20:\n            response = _context4.sent;\n            isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n            if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {\n              options = {};\n              ['status', 'statusText', 'headers'].forEach(function (prop) {\n                options[prop] = response[prop];\n              });\n              responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n              _ref5 = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [], _ref6 = _slicedToArray(_ref5, 2), _onProgress = _ref6[0], _flush = _ref6[1];\n              response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, _onProgress, function () {\n                _flush && _flush();\n                unsubscribe && unsubscribe();\n              }), options);\n            }\n\n            responseType = responseType || 'text';\n            _context4.next = 26;\n            return resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n          case 26:\n            responseData = _context4.sent;\n            !isStreamResponse && unsubscribe && unsubscribe();\n            _context4.next = 30;\n            return new Promise(function (resolve, reject) {\n              settle(resolve, reject, {\n                data: responseData,\n                headers: AxiosHeaders.from(response.headers),\n                status: response.status,\n                statusText: response.statusText,\n                config: config,\n                request: request\n              });\n            });\n\n          case 30:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 33:\n            _context4.prev = 33;\n            _context4.t2 = _context4[\"catch\"](4);\n            unsubscribe && unsubscribe();\n\n            if (!(_context4.t2 && _context4.t2.name === 'TypeError' && /fetch/i.test(_context4.t2.message))) {\n              _context4.next = 38;\n              break;\n            }\n\n            throw Object.assign(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request), {\n              cause: _context4.t2.cause || _context4.t2\n            });\n\n          case 38:\n            throw AxiosError.from(_context4.t2, _context4.t2 && _context4.t2.code, config, request);\n\n          case 39:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[4, 33]]);\n  }));\n\n  return function (_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/axios/lib/adapters/fetch.js"],"names":["platform","utils","AxiosError","composeSignals","trackStream","AxiosHeaders","progressEventReducer","progressEventDecorator","asyncDecorator","resolveConfig","settle","isFetchSupported","fetch","Request","Response","isReadableStreamSupported","ReadableStream","encodeText","TextEncoder","encoder","str","encode","Uint8Array","arrayBuffer","test","fn","args","e","supportsRequestStream","duplexAccessed","hasContentType","origin","body","method","duplex","headers","has","DEFAULT_CHUNK_SIZE","supportsResponseStream","isReadableStream","resolvers","stream","res","forEach","type","isFunction","_","config","ERR_NOT_SUPPORT","getBodyLength","isBlob","size","isSpecCompliantForm","_request","byteLength","isArrayBufferView","isArrayBuffer","isURLSearchParams","isString","resolveBodyLength","length","toFiniteNumber","getContentLength","url","data","signal","cancelToken","timeout","onDownloadProgress","onUploadProgress","responseType","withCredentials","fetchOptions","toLowerCase","composedSignal","toAbortSignal","unsubscribe","requestContentLength","isFormData","contentTypeHeader","get","setContentType","onProgress","flush","isCredentialsSupported","prototype","request","toUpperCase","normalize","toJSON","credentials","undefined","response","isStreamResponse","options","prop","responseContentLength","findKey","responseData","Promise","resolve","reject","from","status","statusText","name","message","Object","assign","ERR_NETWORK","cause","code"],"mappings":"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","sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n"]},"metadata":{},"sourceType":"module"}