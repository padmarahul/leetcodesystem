{"ast":null,"code":"import { lineNumbers, highlightActiveLineGutter, highlightSpecialChars, drawSelection, dropCursor, rectangularSelection, crosshairCursor, highlightActiveLine, keymap } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nimport { history, defaultKeymap, historyKeymap } from '@codemirror/commands';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { foldGutter, indentOnInput, syntaxHighlighting, defaultHighlightStyle, bracketMatching, indentUnit, foldKeymap } from '@codemirror/language';\nimport { lintKeymap } from '@codemirror/lint';\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/\n\nexport var basicSetup = function basicSetup(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$crosshairCur = _options.crosshairCursor,\n      initCrosshairCursor = _options$crosshairCur === void 0 ? false : _options$crosshairCur;\n  var keymaps = [];\n\n  if (options.closeBracketsKeymap !== false) {\n    keymaps = keymaps.concat(closeBracketsKeymap);\n  }\n\n  if (options.defaultKeymap !== false) {\n    keymaps = keymaps.concat(defaultKeymap);\n  }\n\n  if (options.searchKeymap !== false) {\n    keymaps = keymaps.concat(searchKeymap);\n  }\n\n  if (options.historyKeymap !== false) {\n    keymaps = keymaps.concat(historyKeymap);\n  }\n\n  if (options.foldKeymap !== false) {\n    keymaps = keymaps.concat(foldKeymap);\n  }\n\n  if (options.completionKeymap !== false) {\n    keymaps = keymaps.concat(completionKeymap);\n  }\n\n  if (options.lintKeymap !== false) {\n    keymaps = keymaps.concat(lintKeymap);\n  }\n\n  var extensions = [];\n  if (options.lineNumbers !== false) extensions.push(lineNumbers());\n  if (options.highlightActiveLineGutter !== false) extensions.push(highlightActiveLineGutter());\n  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());\n  if (options.history !== false) extensions.push(history());\n  if (options.foldGutter !== false) extensions.push(foldGutter());\n  if (options.drawSelection !== false) extensions.push(drawSelection());\n  if (options.dropCursor !== false) extensions.push(dropCursor());\n  if (options.allowMultipleSelections !== false) extensions.push(EditorState.allowMultipleSelections.of(true));\n  if (options.indentOnInput !== false) extensions.push(indentOnInput());\n  if (options.syntaxHighlighting !== false) extensions.push(syntaxHighlighting(defaultHighlightStyle, {\n    fallback: true\n  }));\n  if (options.bracketMatching !== false) extensions.push(bracketMatching());\n  if (options.closeBrackets !== false) extensions.push(closeBrackets());\n  if (options.autocompletion !== false) extensions.push(autocompletion());\n  if (options.rectangularSelection !== false) extensions.push(rectangularSelection());\n  if (initCrosshairCursor !== false) extensions.push(crosshairCursor());\n  if (options.highlightActiveLine !== false) extensions.push(highlightActiveLine());\n  if (options.highlightSelectionMatches !== false) extensions.push(highlightSelectionMatches());\n  if (options.tabSize && typeof options.tabSize === 'number') extensions.push(indentUnit.of(' '.repeat(options.tabSize)));\n  return extensions.concat([keymap.of(keymaps.flat())]).filter(Boolean);\n};\n/**\nA minimal set of extensions to create a functional editor. Only\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\n*/\n\nexport var minimalSetup = function minimalSetup(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var keymaps = [];\n\n  if (options.defaultKeymap !== false) {\n    keymaps = keymaps.concat(defaultKeymap);\n  }\n\n  if (options.historyKeymap !== false) {\n    keymaps = keymaps.concat(historyKeymap);\n  }\n\n  var extensions = [];\n  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());\n  if (options.history !== false) extensions.push(history());\n  if (options.drawSelection !== false) extensions.push(drawSelection());\n  if (options.syntaxHighlighting !== false) extensions.push(syntaxHighlighting(defaultHighlightStyle, {\n    fallback: true\n  }));\n  return extensions.concat([keymap.of(keymaps.flat())]).filter(Boolean);\n};","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodesystem/leetcodeUI/frontend/node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js"],"names":["lineNumbers","highlightActiveLineGutter","highlightSpecialChars","drawSelection","dropCursor","rectangularSelection","crosshairCursor","highlightActiveLine","keymap","EditorState","history","defaultKeymap","historyKeymap","highlightSelectionMatches","searchKeymap","closeBrackets","autocompletion","closeBracketsKeymap","completionKeymap","foldGutter","indentOnInput","syntaxHighlighting","defaultHighlightStyle","bracketMatching","indentUnit","foldKeymap","lintKeymap","basicSetup","options","initCrosshairCursor","keymaps","concat","extensions","push","allowMultipleSelections","of","fallback","tabSize","repeat","flat","filter","Boolean","minimalSetup"],"mappings":"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","sourcesContent":["import { lineNumbers, highlightActiveLineGutter, highlightSpecialChars, drawSelection, dropCursor, rectangularSelection, crosshairCursor, highlightActiveLine, keymap } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nimport { history, defaultKeymap, historyKeymap } from '@codemirror/commands';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { foldGutter, indentOnInput, syntaxHighlighting, defaultHighlightStyle, bracketMatching, indentUnit, foldKeymap } from '@codemirror/language';\nimport { lintKeymap } from '@codemirror/lint';\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/\nexport var basicSetup = function basicSetup(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var {\n    crosshairCursor: initCrosshairCursor = false\n  } = options;\n  var keymaps = [];\n  if (options.closeBracketsKeymap !== false) {\n    keymaps = keymaps.concat(closeBracketsKeymap);\n  }\n  if (options.defaultKeymap !== false) {\n    keymaps = keymaps.concat(defaultKeymap);\n  }\n  if (options.searchKeymap !== false) {\n    keymaps = keymaps.concat(searchKeymap);\n  }\n  if (options.historyKeymap !== false) {\n    keymaps = keymaps.concat(historyKeymap);\n  }\n  if (options.foldKeymap !== false) {\n    keymaps = keymaps.concat(foldKeymap);\n  }\n  if (options.completionKeymap !== false) {\n    keymaps = keymaps.concat(completionKeymap);\n  }\n  if (options.lintKeymap !== false) {\n    keymaps = keymaps.concat(lintKeymap);\n  }\n  var extensions = [];\n  if (options.lineNumbers !== false) extensions.push(lineNumbers());\n  if (options.highlightActiveLineGutter !== false) extensions.push(highlightActiveLineGutter());\n  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());\n  if (options.history !== false) extensions.push(history());\n  if (options.foldGutter !== false) extensions.push(foldGutter());\n  if (options.drawSelection !== false) extensions.push(drawSelection());\n  if (options.dropCursor !== false) extensions.push(dropCursor());\n  if (options.allowMultipleSelections !== false) extensions.push(EditorState.allowMultipleSelections.of(true));\n  if (options.indentOnInput !== false) extensions.push(indentOnInput());\n  if (options.syntaxHighlighting !== false) extensions.push(syntaxHighlighting(defaultHighlightStyle, {\n    fallback: true\n  }));\n  if (options.bracketMatching !== false) extensions.push(bracketMatching());\n  if (options.closeBrackets !== false) extensions.push(closeBrackets());\n  if (options.autocompletion !== false) extensions.push(autocompletion());\n  if (options.rectangularSelection !== false) extensions.push(rectangularSelection());\n  if (initCrosshairCursor !== false) extensions.push(crosshairCursor());\n  if (options.highlightActiveLine !== false) extensions.push(highlightActiveLine());\n  if (options.highlightSelectionMatches !== false) extensions.push(highlightSelectionMatches());\n  if (options.tabSize && typeof options.tabSize === 'number') extensions.push(indentUnit.of(' '.repeat(options.tabSize)));\n  return extensions.concat([keymap.of(keymaps.flat())]).filter(Boolean);\n};\n/**\nA minimal set of extensions to create a functional editor. Only\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\n*/\nexport var minimalSetup = function minimalSetup(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var keymaps = [];\n  if (options.defaultKeymap !== false) {\n    keymaps = keymaps.concat(defaultKeymap);\n  }\n  if (options.historyKeymap !== false) {\n    keymaps = keymaps.concat(historyKeymap);\n  }\n  var extensions = [];\n  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());\n  if (options.history !== false) extensions.push(history());\n  if (options.drawSelection !== false) extensions.push(drawSelection());\n  if (options.syntaxHighlighting !== false) extensions.push(syntaxHighlighting(defaultHighlightStyle, {\n    fallback: true\n  }));\n  return extensions.concat([keymap.of(keymaps.flat())]).filter(Boolean);\n};"]},"metadata":{},"sourceType":"module"}