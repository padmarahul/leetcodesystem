{"ast":null,"code":"import { indentWithTab } from '@codemirror/commands';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { EditorState } from '@codemirror/state';\nimport { defaultLightThemeOption } from './theme/light';\nexport * from '@codemirror/theme-one-dark';\nexport * from './theme/light';\nexport var getDefaultExtensions = function getDefaultExtensions(optios) {\n  if (optios === void 0) {\n    optios = {};\n  }\n\n  var _optios = optios,\n      _optios$indentWithTab = _optios.indentWithTab,\n      defaultIndentWithTab = _optios$indentWithTab === void 0 ? true : _optios$indentWithTab,\n      _optios$editable = _optios.editable,\n      editable = _optios$editable === void 0 ? true : _optios$editable,\n      _optios$readOnly = _optios.readOnly,\n      readOnly = _optios$readOnly === void 0 ? false : _optios$readOnly,\n      _optios$theme = _optios.theme,\n      theme = _optios$theme === void 0 ? 'light' : _optios$theme,\n      _optios$placeholder = _optios.placeholder,\n      placeholderStr = _optios$placeholder === void 0 ? '' : _optios$placeholder,\n      _optios$basicSetup = _optios.basicSetup,\n      defaultBasicSetup = _optios$basicSetup === void 0 ? true : _optios$basicSetup;\n  var getExtensions = [];\n\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n\n  if (defaultBasicSetup) {\n    if (typeof defaultBasicSetup === 'boolean') {\n      getExtensions.unshift(basicSetup());\n    } else {\n      getExtensions.unshift(basicSetup(defaultBasicSetup));\n    }\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    case 'none':\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  return [].concat(getExtensions);\n};","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/leetcodeUI/frontend/node_modules/@uiw/react-codemirror/esm/getDefaultExtensions.js"],"names":["indentWithTab","basicSetup","EditorView","keymap","placeholder","oneDark","EditorState","defaultLightThemeOption","getDefaultExtensions","optios","defaultIndentWithTab","editable","readOnly","theme","placeholderStr","defaultBasicSetup","getExtensions","unshift","of","push"],"mappings":"AAAA,SAASA,aAAT,QAA8B,sBAA9B;AACA,SAASC,UAAT,QAA2B,wCAA3B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,kBAAhD;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,uBAAT,QAAwC,eAAxC;AACA,cAAc,4BAAd;AACA,cAAc,eAAd;AACA,OAAO,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,MAA9B,EAAsC;AACtE,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrBA,IAAAA,MAAM,GAAG,EAAT;AACD;;AAHqE,gBAWlEA,MAXkE;AAAA,sCAKpET,aALoE;AAAA,MAKrDU,oBALqD,sCAK9B,IAL8B;AAAA,iCAMpEC,QANoE;AAAA,MAMpEA,QANoE,iCAMzD,IANyD;AAAA,iCAOpEC,QAPoE;AAAA,MAOpEA,QAPoE,iCAOzD,KAPyD;AAAA,8BAQpEC,KARoE;AAAA,MAQpEA,KARoE,8BAQ5D,OAR4D;AAAA,oCASpET,WAToE;AAAA,MASvDU,cATuD,oCAStC,EATsC;AAAA,mCAUpEb,UAVoE;AAAA,MAUxDc,iBAVwD,mCAUpC,IAVoC;AAYtE,MAAIC,aAAa,GAAG,EAApB;;AACA,MAAIN,oBAAJ,EAA0B;AACxBM,IAAAA,aAAa,CAACC,OAAd,CAAsBd,MAAM,CAACe,EAAP,CAAU,CAAClB,aAAD,CAAV,CAAtB;AACD;;AACD,MAAIe,iBAAJ,EAAuB;AACrB,QAAI,OAAOA,iBAAP,KAA6B,SAAjC,EAA4C;AAC1CC,MAAAA,aAAa,CAACC,OAAd,CAAsBhB,UAAU,EAAhC;AACD,KAFD,MAEO;AACLe,MAAAA,aAAa,CAACC,OAAd,CAAsBhB,UAAU,CAACc,iBAAD,CAAhC;AACD;AACF;;AACD,MAAID,cAAJ,EAAoB;AAClBE,IAAAA,aAAa,CAACC,OAAd,CAAsBb,WAAW,CAACU,cAAD,CAAjC;AACD;;AACD,UAAQD,KAAR;AACE,SAAK,OAAL;AACEG,MAAAA,aAAa,CAACG,IAAd,CAAmBZ,uBAAnB;AACA;;AACF,SAAK,MAAL;AACES,MAAAA,aAAa,CAACG,IAAd,CAAmBd,OAAnB;AACA;;AACF,SAAK,MAAL;AACE;;AACF;AACEW,MAAAA,aAAa,CAACG,IAAd,CAAmBN,KAAnB;AACA;AAXJ;;AAaA,MAAIF,QAAQ,KAAK,KAAjB,EAAwB;AACtBK,IAAAA,aAAa,CAACG,IAAd,CAAmBjB,UAAU,CAACS,QAAX,CAAoBO,EAApB,CAAuB,KAAvB,CAAnB;AACD;;AACD,MAAIN,QAAJ,EAAc;AACZI,IAAAA,aAAa,CAACG,IAAd,CAAmBb,WAAW,CAACM,QAAZ,CAAqBM,EAArB,CAAwB,IAAxB,CAAnB;AACD;;AACD,mBAAWF,aAAX;AACD,CA9CM","sourcesContent":["import { indentWithTab } from '@codemirror/commands';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { EditorState } from '@codemirror/state';\nimport { defaultLightThemeOption } from './theme/light';\nexport * from '@codemirror/theme-one-dark';\nexport * from './theme/light';\nexport var getDefaultExtensions = function getDefaultExtensions(optios) {\n  if (optios === void 0) {\n    optios = {};\n  }\n  var {\n    indentWithTab: defaultIndentWithTab = true,\n    editable = true,\n    readOnly = false,\n    theme = 'light',\n    placeholder: placeholderStr = '',\n    basicSetup: defaultBasicSetup = true\n  } = optios;\n  var getExtensions = [];\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n  if (defaultBasicSetup) {\n    if (typeof defaultBasicSetup === 'boolean') {\n      getExtensions.unshift(basicSetup());\n    } else {\n      getExtensions.unshift(basicSetup(defaultBasicSetup));\n    }\n  }\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n    case 'none':\n      break;\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n  return [...getExtensions];\n};"]},"metadata":{},"sourceType":"module"}